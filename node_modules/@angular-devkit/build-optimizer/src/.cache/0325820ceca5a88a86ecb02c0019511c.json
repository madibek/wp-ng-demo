{"remainingRequest":"/home/malgara/angular/demos/spliff/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/malgara/angular/demos/spliff/node_modules/ngx-pipes/ngx-pipes.es5.js","dependencies":[{"path":"/home/malgara/angular/demos/spliff/node_modules/ngx-pipes/ngx-pipes.es5.js","mtime":1519667656000},{"path":"/home/malgara/angular/demos/spliff/node_modules/cache-loader/dist/cjs.js","mtime":1531243065873},{"path":"/home/malgara/angular/demos/spliff/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { NgModule, Pipe } from '@angular/core';\nvar DiffPipe = /*@__PURE__*/ (function () {\n    function DiffPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {...?} args\n     * @return {?}\n     */\n    DiffPipe.prototype.transform = function (input) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        // tslint:disable-next-line no-bitwise\n        return args.reduce(function (d, c) { return d.filter(function (e) { return !~c.indexOf(e); }); }, input);\n    };\n    return DiffPipe;\n}());\nvar InitialPipe = /*@__PURE__*/ (function () {\n    function InitialPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} num\n     * @return {?}\n     */\n    InitialPipe.prototype.transform = function (input, num) {\n        if (num === void 0) {\n            num = 0;\n        }\n        return Array.isArray(input)\n            ? input.slice(0, input.length - num)\n            : input;\n    };\n    return InitialPipe;\n}());\nvar FlattenPipe = /*@__PURE__*/ (function () {\n    function FlattenPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} shallow\n     * @return {?}\n     */\n    FlattenPipe.prototype.transform = function (input, shallow) {\n        if (shallow === void 0) {\n            shallow = false;\n        }\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        return shallow\n            ? [].concat.apply([], input)\n            : this.flatten(input);\n    };\n    /**\n     * @param {?} array\n     * @return {?}\n     */\n    FlattenPipe.prototype.flatten = function (array) {\n        var _this = this;\n        return array.reduce(function (arr, elm) {\n            if (Array.isArray(elm)) {\n                return arr.concat(_this.flatten(elm));\n            }\n            return arr.concat(elm);\n        }, []);\n    };\n    return FlattenPipe;\n}());\nvar IntersectionPipe = /*@__PURE__*/ (function () {\n    function IntersectionPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {...?} args\n     * @return {?}\n     */\n    IntersectionPipe.prototype.transform = function (input) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        // tslint:disable-next-line no-bitwise\n        return args.reduce(function (n, c) { return n.filter(function (e) { return !!~c.indexOf(e); }); }, input);\n    };\n    return IntersectionPipe;\n}());\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isObject(value) {\n    return value !== null && typeof value === 'object';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNumberFinite(value) {\n    return isNumber(value) && isFinite(value);\n}\n/**\n * @param {?} num\n * @param {?} precision\n * @return {?}\n */\nfunction applyPrecision(num, precision) {\n    if (precision <= 0) {\n        return Math.round(num);\n    }\n    var /** @type {?} */ tho = Math.pow(10, precision);\n    return Math.round(num * tho) / tho;\n}\n/**\n * @param {?} obj\n * @param {?} map\n * @return {?}\n */\nfunction extractDeepPropertyByMapKey(obj, map) {\n    var /** @type {?} */ keys = map.split('.');\n    var /** @type {?} */ head = keys.shift();\n    return keys.reduce(function (prop, key) {\n        return !isUndefined(prop) && !isUndefined(prop[key])\n            ? prop[key]\n            : undefined;\n    }, obj[head || '']);\n}\n/**\n * @param {?} obj\n * @param {?} other\n * @return {?}\n */\nfunction getKeysTwoObjects(obj, other) {\n    return Object.keys(obj).concat(Object.keys(other)).filter(function (key, index, array) { return array.indexOf(key) === index; });\n}\n/**\n * @param {?} obj\n * @param {?} other\n * @return {?}\n */\nfunction isDeepEqual(obj, other) {\n    if (!isObject(obj) || !isObject(other)) {\n        return obj === other;\n    }\n    return getKeysTwoObjects(obj, other).every(function (key) {\n        if (!isObject(obj[key]) && !isObject(other[key])) {\n            return obj[key] === other[key];\n        }\n        if (!isObject(obj[key]) || !isObject(other[key])) {\n            return false;\n        }\n        return isDeepEqual(obj[key], other[key]);\n    });\n}\nvar ReversePipe = /*@__PURE__*/ (function () {\n    function ReversePipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    ReversePipe.prototype.transform = function (input) {\n        if (isString(input)) {\n            return input.split('').reverse().join('');\n        }\n        return Array.isArray(input)\n            ? input.slice().reverse()\n            : input;\n    };\n    return ReversePipe;\n}());\nvar TailPipe = /*@__PURE__*/ (function () {\n    function TailPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} num\n     * @return {?}\n     */\n    TailPipe.prototype.transform = function (input, num) {\n        if (num === void 0) {\n            num = 0;\n        }\n        return Array.isArray(input) ? input.slice(num) : input;\n    };\n    return TailPipe;\n}());\nvar TrurthifyPipe = /*@__PURE__*/ (function () {\n    function TrurthifyPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    TrurthifyPipe.prototype.transform = function (input) {\n        return Array.isArray(input)\n            ? input.filter(function (e) { return !!e; })\n            : input;\n    };\n    return TrurthifyPipe;\n}());\nvar UnionPipe = /*@__PURE__*/ (function () {\n    function UnionPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} args\n     * @return {?}\n     */\n    UnionPipe.prototype.transform = function (input, args) {\n        if (args === void 0) {\n            args = [];\n        }\n        if (!Array.isArray(input) || !Array.isArray(args)) {\n            return input;\n        }\n        return args.reduce(function (newArr, currArr) {\n            return newArr.concat(currArr.reduce(function (noDupArr, curr) {\n                // tslint:disable-next-line:no-bitwise\n                return (!~noDupArr.indexOf(curr) && !~newArr.indexOf(curr))\n                    ? noDupArr.concat([curr])\n                    : noDupArr;\n            }, []));\n        }, input);\n    };\n    return UnionPipe;\n}());\nvar UniquePipe = /*@__PURE__*/ (function () {\n    function UniquePipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} propertyName\n     * @return {?}\n     */\n    UniquePipe.prototype.transform = function (input, propertyName) {\n        var /** @type {?} */ uniques = [];\n        return Array.isArray(input) ?\n            isUndefined(propertyName) ?\n                input.filter(function (e, i) { return input.indexOf(e) === i; }) :\n                input.filter(function (e, i) {\n                    var /** @type {?} */ value = extractDeepPropertyByMapKey(e, propertyName);\n                    value = isObject(value) ? JSON.stringify(value) : value;\n                    if (isUndefined(value) || uniques[value]) {\n                        return false;\n                    }\n                    uniques[value] = true;\n                    return true;\n                }) : input;\n    };\n    return UniquePipe;\n}());\nvar WithoutPipe = /*@__PURE__*/ (function () {\n    function WithoutPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} args\n     * @return {?}\n     */\n    WithoutPipe.prototype.transform = function (input, args) {\n        if (args === void 0) {\n            args = [];\n        }\n        return Array.isArray(input)\n            ? input.filter(function (e) { return !~args.indexOf(e); })\n            : input;\n    };\n    return WithoutPipe;\n}());\nvar PluckPipe = /*@__PURE__*/ (function () {\n    function PluckPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} map\n     * @return {?}\n     */\n    PluckPipe.prototype.transform = function (input, map) {\n        return Array.isArray(input)\n            ? input.map(function (e) { return extractDeepPropertyByMapKey(e, map); })\n            : input;\n    };\n    return PluckPipe;\n}());\nvar ShufflePipe = /*@__PURE__*/ (function () {\n    function ShufflePipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    ShufflePipe.prototype.transform = function (input) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        var /** @type {?} */ shuffled = input.slice();\n        var /** @type {?} */ n = input.length - 1;\n        for (var /** @type {?} */ i = 0; i < n; ++i) {\n            var /** @type {?} */ j = Math.floor(Math.random() * (n - i + 1)) + i;\n            _a = [shuffled[j], shuffled[i]], shuffled[i] = _a[0], shuffled[j] = _a[1];\n        }\n        return shuffled;\n        var _a;\n    };\n    return ShufflePipe;\n}());\nvar EveryPipe = /*@__PURE__*/ (function () {\n    function EveryPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} predicate\n     * @return {?}\n     */\n    EveryPipe.prototype.transform = function (input, predicate) {\n        return Array.isArray(input) ? input.every(predicate) : false;\n    };\n    return EveryPipe;\n}());\nvar SomePipe = /*@__PURE__*/ (function () {\n    function SomePipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} predicate\n     * @return {?}\n     */\n    SomePipe.prototype.transform = function (input, predicate) {\n        return Array.isArray(input) ? input.some(predicate) : input;\n    };\n    return SomePipe;\n}());\nvar SamplePipe = /*@__PURE__*/ (function () {\n    function SamplePipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} len\n     * @return {?}\n     */\n    SamplePipe.prototype.transform = function (input, len) {\n        if (len === void 0) {\n            len = 1;\n        }\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        var /** @type {?} */ sample = [];\n        var /** @type {?} */ tmp = input.slice();\n        var /** @type {?} */ l = len < tmp.length ? len : tmp.length;\n        for (var /** @type {?} */ i = 0; i < l; ++i) {\n            sample = sample.concat(tmp.splice(Math.floor(Math.random() * tmp.length), 1));\n        }\n        return sample;\n    };\n    return SamplePipe;\n}());\nvar GroupByPipe = /*@__PURE__*/ (function () {\n    function GroupByPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} discriminator\n     * @param {?=} delimiter\n     * @return {?}\n     */\n    GroupByPipe.prototype.transform = function (input, discriminator, delimiter) {\n        if (discriminator === void 0) {\n            discriminator = [];\n        }\n        if (delimiter === void 0) {\n            delimiter = '|';\n        }\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        return this.groupBy(input, discriminator, delimiter);\n    };\n    /**\n     * @param {?} list\n     * @param {?} discriminator\n     * @param {?} delimiter\n     * @return {?}\n     */\n    GroupByPipe.prototype.groupBy = function (list, discriminator, delimiter) {\n        var _this = this;\n        return list.reduce(function (acc, payload) {\n            var /** @type {?} */ key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);\n            acc[key] = Array.isArray(acc[key])\n                ? acc[key].concat([payload])\n                : [payload];\n            return acc;\n        }, {});\n    };\n    /**\n     * @param {?} discriminator\n     * @param {?} payload\n     * @param {?} delimiter\n     * @return {?}\n     */\n    GroupByPipe.prototype.extractKeyByDiscriminator = function (discriminator, payload, delimiter) {\n        if (isFunction(discriminator)) {\n            return ((discriminator))(payload);\n        }\n        if (Array.isArray(discriminator)) {\n            return discriminator.map(function (k) { return extractDeepPropertyByMapKey(payload, k); }).join(delimiter);\n        }\n        return extractDeepPropertyByMapKey(payload, /** @type {?} */ (discriminator));\n    };\n    return GroupByPipe;\n}());\nvar FilterByPipe = /*@__PURE__*/ (function () {\n    function FilterByPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} props\n     * @param {?=} search\n     * @param {?=} strict\n     * @return {?}\n     */\n    FilterByPipe.prototype.transform = function (input, props, search, strict) {\n        if (search === void 0) {\n            search = '';\n        }\n        if (strict === void 0) {\n            strict = false;\n        }\n        if (!Array.isArray(input) || (!isString(search) && !isNumberFinite(search) && !isBoolean(search))) {\n            return input;\n        }\n        var /** @type {?} */ term = String(search).toLowerCase();\n        return input.filter(function (obj) {\n            return props.some(function (prop) {\n                var /** @type {?} */ value = extractDeepPropertyByMapKey(obj, prop);\n                var /** @type {?} */ strValue = String(value).toLowerCase();\n                if (isUndefined(value)) {\n                    return false;\n                }\n                return strict\n                    ? term === strValue\n                    : !!~strValue.indexOf(term);\n            });\n        });\n    };\n    return FilterByPipe;\n}());\nvar OrderByPipe = /*@__PURE__*/ (function () {\n    function OrderByPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?=} config\n     * @return {?}\n     */\n    OrderByPipe.prototype.transform = function (input, config) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        var /** @type {?} */ out = input.slice();\n        // sort by multiple properties\n        if (Array.isArray(config)) {\n            return out.sort(function (a, b) {\n                var /** @type {?} */ l = config.length;\n                for (var /** @type {?} */ i = 0; i < l; ++i) {\n                    var _a = OrderByPipe.extractFromConfig(config[i]), prop = _a[0], asc = _a[1];\n                    var /** @type {?} */ pos = OrderByPipe.orderCompare(prop, asc, a, b);\n                    if (pos !== 0) {\n                        return pos;\n                    }\n                }\n                return 0;\n            });\n        }\n        // sort by a single property value\n        if (isString(config)) {\n            var _a = OrderByPipe.extractFromConfig(config), prop = _a[0], asc = _a[1], sign = _a[2];\n            if (config.length === 1) {\n                // tslint:disable-next-line:switch-default\n                switch (sign) {\n                    case '+': return out.sort(OrderByPipe.simpleSort.bind(this));\n                    case '-': return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();\n                }\n            }\n            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));\n        }\n        // default sort by value\n        return out.sort(OrderByPipe.simpleSort.bind(this));\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    OrderByPipe.simpleSort = function (a, b) {\n        return isString(a) && isString(b)\n            ? a.toLowerCase().localeCompare(b.toLowerCase())\n            : a - b;\n    };\n    /**\n     * @param {?} prop\n     * @param {?} asc\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    OrderByPipe.orderCompare = function (prop, asc, a, b) {\n        var /** @type {?} */ first = extractDeepPropertyByMapKey(a, prop);\n        var /** @type {?} */ second = extractDeepPropertyByMapKey(b, prop);\n        if (first === second) {\n            return 0;\n        }\n        if (isUndefined(first) || first === '') {\n            return 1;\n        }\n        if (isUndefined(second) || second === '') {\n            return -1;\n        }\n        if (isString(first) && isString(second)) {\n            var /** @type {?} */ pos = first.toLowerCase().localeCompare(second.toLowerCase());\n            return asc ? pos : -pos;\n        }\n        return asc\n            ? first - second\n            : second - first;\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    OrderByPipe.extractFromConfig = function (config) {\n        var /** @type {?} */ sign = config.substr(0, 1);\n        var /** @type {?} */ prop = config.replace(/^[-+]/, '');\n        var /** @type {?} */ asc = sign !== '-';\n        return [prop, asc, sign];\n    };\n    return OrderByPipe;\n}());\nvar GroupByImpurePipe = /*@__PURE__*/ (function (_super) {\n    __extends(GroupByImpurePipe, _super);\n    function GroupByImpurePipe() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return GroupByImpurePipe;\n}(GroupByPipe));\nvar FilterByImpurePipe = /*@__PURE__*/ (function (_super) {\n    __extends(FilterByImpurePipe, _super);\n    function FilterByImpurePipe() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return FilterByImpurePipe;\n}(FilterByPipe));\nvar OrderByImpurePipe = /*@__PURE__*/ (function (_super) {\n    __extends(OrderByImpurePipe, _super);\n    function OrderByImpurePipe() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return OrderByImpurePipe;\n}(OrderByPipe));\nvar RangePipe = /*@__PURE__*/ (function () {\n    function RangePipe() {\n    }\n    /**\n     * @param {?=} start\n     * @param {?=} count\n     * @param {?=} step\n     * @return {?}\n     */\n    RangePipe.prototype.transform = function (start, count, step) {\n        if (start === void 0) {\n            start = 1;\n        }\n        if (count === void 0) {\n            count = 0;\n        }\n        if (step === void 0) {\n            step = 1;\n        }\n        return Array(count).fill('').map(function (v, i) { return step * i + start; });\n    };\n    return RangePipe;\n}());\nvar ARRAY_PIPES = [\n    DiffPipe, FlattenPipe, InitialPipe, IntersectionPipe, ReversePipe, TailPipe,\n    TrurthifyPipe, UnionPipe, UniquePipe, WithoutPipe, PluckPipe, ShufflePipe,\n    EveryPipe, SomePipe, SamplePipe, GroupByPipe, GroupByImpurePipe,\n    FilterByPipe, FilterByImpurePipe, OrderByPipe, OrderByImpurePipe,\n    RangePipe,\n];\nvar NgArrayPipesModule = /*@__PURE__*/ (function () {\n    function NgArrayPipesModule() {\n    }\n    return NgArrayPipesModule;\n}());\nvar KeysPipe = /*@__PURE__*/ (function () {\n    function KeysPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    KeysPipe.prototype.transform = function (obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj);\n    };\n    return KeysPipe;\n}());\nvar ValuesPipe = /*@__PURE__*/ (function () {\n    function ValuesPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    ValuesPipe.prototype.transform = function (obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj).map(function (k) { return obj[k]; });\n    };\n    return ValuesPipe;\n}());\nvar PairsPipe = /*@__PURE__*/ (function () {\n    function PairsPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    PairsPipe.prototype.transform = function (obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj).map(function (k) { return [k, obj[k]]; });\n    };\n    return PairsPipe;\n}());\nvar PickPipe = /*@__PURE__*/ (function () {\n    function PickPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @param {...?} args\n     * @return {?}\n     */\n    PickPipe.prototype.transform = function (obj) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return args.reduce(function (o, k) {\n            return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));\n            var _a;\n        }, {});\n    };\n    return PickPipe;\n}());\nvar OmitPipe = /*@__PURE__*/ (function () {\n    function OmitPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @param {...?} args\n     * @return {?}\n     */\n    OmitPipe.prototype.transform = function (obj) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj)\n            .filter(function (k) { return !~args.indexOf(k); })\n            .reduce(function (o, k) {\n            return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));\n            var _a;\n        }, {});\n    };\n    return OmitPipe;\n}());\nvar InvertPipe = /*@__PURE__*/ (function () {\n    function InvertPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    InvertPipe.prototype.transform = function (obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj)\n            .reduce(function (o, k) {\n            return Object.assign(o, (_a = {}, _a[obj[k]] = k, _a));\n            var _a;\n        }, {});\n    };\n    return InvertPipe;\n}());\nvar InvertByPipe = /*@__PURE__*/ (function () {\n    function InvertByPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @param {?=} cb\n     * @return {?}\n     */\n    InvertByPipe.prototype.transform = function (obj, cb) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj).reduce(function (o, k) {\n            var /** @type {?} */ key = cb ? cb(obj[k]) : obj[k];\n            return Array.isArray(o[key])\n                ? (o[key].push(k), o)\n                : Object.assign(o, (_a = {}, _a[key] = [k], _a));\n            var _a;\n        }, {});\n    };\n    return InvertByPipe;\n}());\nvar DiffObjPipe = /*@__PURE__*/ (function () {\n    function DiffObjPipe() {\n    }\n    /**\n     * @param {?} obj\n     * @param {?=} original\n     * @return {?}\n     */\n    DiffObjPipe.prototype.transform = function (obj, original) {\n        if (original === void 0) {\n            original = {};\n        }\n        if (Array.isArray(obj) || Array.isArray(original) || !isObject(obj) || !isObject(original)) {\n            return {};\n        }\n        return getKeysTwoObjects(obj, original).reduce(function (diff, key) {\n            if (!isDeepEqual(original[key], obj[key])) {\n                diff[key] = obj[key];\n            }\n            return diff;\n        }, {});\n    };\n    return DiffObjPipe;\n}());\nvar OBJECT_PIPES = [\n    KeysPipe, ValuesPipe, PairsPipe, PickPipe, InvertPipe, InvertByPipe,\n    OmitPipe, DiffObjPipe,\n];\nvar NgObjectPipesModule = /*@__PURE__*/ (function () {\n    function NgObjectPipesModule() {\n    }\n    return NgObjectPipesModule;\n}());\nvar UcWordsPipe = /*@__PURE__*/ (function () {\n    function UcWordsPipe() {\n    }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    UcWordsPipe.prototype.transform = function (text) {\n        if (isString(text)) {\n            return text.split(' ')\n                .map(function (sub) { return sub.slice(0, 1).toUpperCase() + sub.slice(1); })\n                .join(' ');\n        }\n        return text;\n    };\n    return UcWordsPipe;\n}());\nvar LeftTrimPipe = /*@__PURE__*/ (function () {\n    function LeftTrimPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} chars\n     * @return {?}\n     */\n    LeftTrimPipe.prototype.transform = function (text, chars) {\n        if (chars === void 0) {\n            chars = '\\\\s';\n        }\n        return isString(text)\n            ? text.replace(new RegExp(\"^[\" + chars + \"]+\"), '')\n            : text;\n    };\n    return LeftTrimPipe;\n}());\nvar RepeatPipe = /*@__PURE__*/ (function () {\n    function RepeatPipe() {\n    }\n    /**\n     * @param {?} str\n     * @param {?=} n\n     * @param {?=} separator\n     * @return {?}\n     */\n    RepeatPipe.prototype.transform = function (str, n, separator) {\n        if (n === void 0) {\n            n = 1;\n        }\n        if (separator === void 0) {\n            separator = '';\n        }\n        if (n <= 0) {\n            throw new RangeError();\n        }\n        return n === 1 ? str : this.repeat(str, n - 1, separator);\n    };\n    /**\n     * @param {?} str\n     * @param {?} n\n     * @param {?} separator\n     * @return {?}\n     */\n    RepeatPipe.prototype.repeat = function (str, n, separator) {\n        return isString(str)\n            ? (n === 0 ? str : (str + separator + this.repeat(str, n - 1, separator)))\n            : str;\n    };\n    return RepeatPipe;\n}());\nvar RightTrimPipe = /*@__PURE__*/ (function () {\n    function RightTrimPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} chars\n     * @return {?}\n     */\n    RightTrimPipe.prototype.transform = function (text, chars) {\n        if (chars === void 0) {\n            chars = '\\\\s';\n        }\n        return isString(text)\n            ? text.replace(new RegExp(\"[\" + chars + \"]+$\"), '')\n            : text;\n    };\n    return RightTrimPipe;\n}());\nvar ScanPipe = /*@__PURE__*/ (function () {\n    function ScanPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} args\n     * @return {?}\n     */\n    ScanPipe.prototype.transform = function (text, args) {\n        if (args === void 0) {\n            args = [];\n        }\n        return isString(text)\n            ? text.replace(/\\{(\\d+)}/g, function (match, index) { return !isUndefined(args[index]) ? args[index] : match; })\n            : text;\n    };\n    return ScanPipe;\n}());\nvar ShortenPipe = /*@__PURE__*/ (function () {\n    function ShortenPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} length\n     * @param {?=} suffix\n     * @param {?=} wordBreak\n     * @return {?}\n     */\n    ShortenPipe.prototype.transform = function (text, length, suffix, wordBreak) {\n        if (length === void 0) {\n            length = 0;\n        }\n        if (suffix === void 0) {\n            suffix = '';\n        }\n        if (wordBreak === void 0) {\n            wordBreak = true;\n        }\n        if (!isString(text)) {\n            return text;\n        }\n        if (text.length > length) {\n            if (wordBreak) {\n                return text.slice(0, length) + suffix;\n            }\n            // tslint:disable-next-line:no-bitwise\n            if (!!~text.indexOf(' ', length)) {\n                return text.slice(0, text.indexOf(' ', length)) + suffix;\n            }\n        }\n        return text;\n    };\n    return ShortenPipe;\n}());\nvar StripTagsPipe = /*@__PURE__*/ (function () {\n    function StripTagsPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {...?} allowedTags\n     * @return {?}\n     */\n    StripTagsPipe.prototype.transform = function (text) {\n        var allowedTags = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            allowedTags[_i - 1] = arguments[_i];\n        }\n        return allowedTags.length > 0\n            ? text.replace(new RegExp(\"<(?!/?(\" + allowedTags.join('|') + \")s*/?)[^>]+>\", 'g'), '')\n            : text.replace(/<(?:.|\\s)*?>/g, '');\n    };\n    return StripTagsPipe;\n}());\nvar TrimPipe = /*@__PURE__*/ (function () {\n    function TrimPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} chars\n     * @return {?}\n     */\n    TrimPipe.prototype.transform = function (text, chars) {\n        if (chars === void 0) {\n            chars = '\\\\s';\n        }\n        return isString(text) ? text.replace(new RegExp(\"^[\" + chars + \"]+|[\" + chars + \"]+$\", 'g'), '') : text;\n    };\n    return TrimPipe;\n}());\nvar UcFirstPipe = /*@__PURE__*/ (function () {\n    function UcFirstPipe() {\n    }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    UcFirstPipe.prototype.transform = function (text) {\n        return isString(text)\n            ? (text.slice(0, 1).toUpperCase() + text.slice(1))\n            : text;\n    };\n    return UcFirstPipe;\n}());\nvar SlugifyPipe = /*@__PURE__*/ (function () {\n    function SlugifyPipe() {\n    }\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    SlugifyPipe.prototype.transform = function (str) {\n        return isString(str)\n            ? str.toLowerCase().trim()\n                .replace(/[^\\w\\-]+/g, ' ')\n                .replace(/\\s+/g, '-')\n            : str;\n    };\n    return SlugifyPipe;\n}());\nvar CamelizePipe = /*@__PURE__*/ (function () {\n    function CamelizePipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} chars\n     * @return {?}\n     */\n    CamelizePipe.prototype.transform = function (text, chars) {\n        if (chars === void 0) {\n            chars = '\\\\s';\n        }\n        if (!isString(text)) {\n            return text;\n        }\n        return text.toLowerCase()\n            .split(/[-_\\s]/g)\n            .filter(function (v) { return !!v; }).map(function (word, key) {\n            return !key ? word : (word.slice(0, 1).toUpperCase() + word.slice(1));\n        }).join('');\n    };\n    return CamelizePipe;\n}());\nvar LatinisePipe = /*@__PURE__*/ (function () {\n    function LatinisePipe() {\n        this.latinMap = { 'Á': 'A', 'Ă': 'A', 'Ắ': 'A', 'Ặ': 'A', 'Ằ': 'A', 'Ẳ': 'A', 'Ẵ': 'A', 'Ǎ': 'A', 'Â': 'A', 'Ấ': 'A', 'Ậ': 'A', 'Ầ': 'A', 'Ẩ': 'A', 'Ẫ': 'A', 'Ä': 'A', 'Ǟ': 'A', 'Ȧ': 'A', 'Ǡ': 'A', 'Ạ': 'A', 'Ȁ': 'A', 'À': 'A', 'Ả': 'A', 'Ȃ': 'A', 'Ā': 'A', 'Ą': 'A', 'Å': 'A', 'Ǻ': 'A', 'Ḁ': 'A', 'Ⱥ': 'A', 'Ã': 'A', 'Ꜳ': 'AA', 'Æ': 'AE', 'Ǽ': 'AE', 'Ǣ': 'AE', 'Ꜵ': 'AO', 'Ꜷ': 'AU', 'Ꜹ': 'AV', 'Ꜻ': 'AV', 'Ꜽ': 'AY', 'Ḃ': 'B', 'Ḅ': 'B', 'Ɓ': 'B', 'Ḇ': 'B', 'Ƀ': 'B', 'Ƃ': 'B', 'Ć': 'C', 'Č': 'C', 'Ç': 'C', 'Ḉ': 'C', 'Ĉ': 'C', 'Ċ': 'C', 'Ƈ': 'C', 'Ȼ': 'C', 'Ď': 'D', 'Ḑ': 'D', 'Ḓ': 'D', 'Ḋ': 'D', 'Ḍ': 'D', 'Ɗ': 'D', 'Ḏ': 'D', 'ǲ': 'D', 'ǅ': 'D', 'Đ': 'D', 'Ƌ': 'D', 'Ǳ': 'DZ', 'Ǆ': 'DZ', 'É': 'E', 'Ĕ': 'E', 'Ě': 'E', 'Ȩ': 'E', 'Ḝ': 'E', 'Ê': 'E', 'Ế': 'E', 'Ệ': 'E', 'Ề': 'E', 'Ể': 'E', 'Ễ': 'E', 'Ḙ': 'E', 'Ë': 'E', 'Ė': 'E', 'Ẹ': 'E', 'Ȅ': 'E', 'È': 'E', 'Ẻ': 'E', 'Ȇ': 'E', 'Ē': 'E', 'Ḗ': 'E', 'Ḕ': 'E', 'Ę': 'E', 'Ɇ': 'E', 'Ẽ': 'E', 'Ḛ': 'E', 'Ꝫ': 'ET', 'Ḟ': 'F', 'Ƒ': 'F', 'Ǵ': 'G', 'Ğ': 'G', 'Ǧ': 'G', 'Ģ': 'G', 'Ĝ': 'G', 'Ġ': 'G', 'Ɠ': 'G', 'Ḡ': 'G', 'Ǥ': 'G', 'Ḫ': 'H', 'Ȟ': 'H', 'Ḩ': 'H', 'Ĥ': 'H', 'Ⱨ': 'H', 'Ḧ': 'H', 'Ḣ': 'H', 'Ḥ': 'H', 'Ħ': 'H', 'Í': 'I', 'Ĭ': 'I', 'Ǐ': 'I', 'Î': 'I', 'Ï': 'I', 'Ḯ': 'I', 'İ': 'I', 'Ị': 'I', 'Ȉ': 'I', 'Ì': 'I', 'Ỉ': 'I', 'Ȋ': 'I', 'Ī': 'I', 'Į': 'I', 'Ɨ': 'I', 'Ĩ': 'I', 'Ḭ': 'I', 'Ꝺ': 'D', 'Ꝼ': 'F', 'Ᵹ': 'G', 'Ꞃ': 'R', 'Ꞅ': 'S', 'Ꞇ': 'T', 'Ꝭ': 'IS', 'Ĵ': 'J', 'Ɉ': 'J', 'Ḱ': 'K', 'Ǩ': 'K', 'Ķ': 'K', 'Ⱪ': 'K', 'Ꝃ': 'K', 'Ḳ': 'K', 'Ƙ': 'K', 'Ḵ': 'K', 'Ꝁ': 'K', 'Ꝅ': 'K', 'Ĺ': 'L', 'Ƚ': 'L', 'Ľ': 'L', 'Ļ': 'L', 'Ḽ': 'L', 'Ḷ': 'L', 'Ḹ': 'L', 'Ⱡ': 'L', 'Ꝉ': 'L', 'Ḻ': 'L', 'Ŀ': 'L', 'Ɫ': 'L', 'ǈ': 'L', 'Ł': 'L', 'Ǉ': 'LJ', 'Ḿ': 'M', 'Ṁ': 'M', 'Ṃ': 'M', 'Ɱ': 'M', 'Ń': 'N', 'Ň': 'N', 'Ņ': 'N', 'Ṋ': 'N', 'Ṅ': 'N', 'Ṇ': 'N', 'Ǹ': 'N', 'Ɲ': 'N', 'Ṉ': 'N', 'Ƞ': 'N', 'ǋ': 'N', 'Ñ': 'N', 'Ǌ': 'NJ', 'Ó': 'O', 'Ŏ': 'O', 'Ǒ': 'O', 'Ô': 'O', 'Ố': 'O', 'Ộ': 'O', 'Ồ': 'O', 'Ổ': 'O', 'Ỗ': 'O', 'Ö': 'O', 'Ȫ': 'O', 'Ȯ': 'O', 'Ȱ': 'O', 'Ọ': 'O', 'Ő': 'O', 'Ȍ': 'O', 'Ò': 'O', 'Ỏ': 'O', 'Ơ': 'O', 'Ớ': 'O', 'Ợ': 'O', 'Ờ': 'O', 'Ở': 'O', 'Ỡ': 'O', 'Ȏ': 'O', 'Ꝋ': 'O', 'Ꝍ': 'O', 'Ō': 'O', 'Ṓ': 'O', 'Ṑ': 'O', 'Ɵ': 'O', 'Ǫ': 'O', 'Ǭ': 'O', 'Ø': 'O', 'Ǿ': 'O', 'Õ': 'O', 'Ṍ': 'O', 'Ṏ': 'O', 'Ȭ': 'O', 'Ƣ': 'OI', 'Ꝏ': 'OO', 'Ɛ': 'E', 'Ɔ': 'O', 'Ȣ': 'OU', 'Ṕ': 'P', 'Ṗ': 'P', 'Ꝓ': 'P', 'Ƥ': 'P', 'Ꝕ': 'P', 'Ᵽ': 'P', 'Ꝑ': 'P', 'Ꝙ': 'Q', 'Ꝗ': 'Q', 'Ŕ': 'R', 'Ř': 'R', 'Ŗ': 'R', 'Ṙ': 'R', 'Ṛ': 'R', 'Ṝ': 'R', 'Ȑ': 'R', 'Ȓ': 'R', 'Ṟ': 'R', 'Ɍ': 'R', 'Ɽ': 'R', 'Ꜿ': 'C', 'Ǝ': 'E', 'Ś': 'S', 'Ṥ': 'S', 'Š': 'S', 'Ṧ': 'S', 'Ş': 'S', 'Ŝ': 'S', 'Ș': 'S', 'Ṡ': 'S', 'Ṣ': 'S', 'Ṩ': 'S', 'ẞ': 'SS', 'Ť': 'T', 'Ţ': 'T', 'Ṱ': 'T', 'Ț': 'T', 'Ⱦ': 'T', 'Ṫ': 'T', 'Ṭ': 'T', 'Ƭ': 'T', 'Ṯ': 'T', 'Ʈ': 'T', 'Ŧ': 'T', 'Ɐ': 'A', 'Ꞁ': 'L', 'Ɯ': 'M', 'Ʌ': 'V', 'Ꜩ': 'TZ', 'Ú': 'U', 'Ŭ': 'U', 'Ǔ': 'U', 'Û': 'U', 'Ṷ': 'U', 'Ü': 'U', 'Ǘ': 'U', 'Ǚ': 'U', 'Ǜ': 'U', 'Ǖ': 'U', 'Ṳ': 'U', 'Ụ': 'U', 'Ű': 'U', 'Ȕ': 'U', 'Ù': 'U', 'Ủ': 'U', 'Ư': 'U', 'Ứ': 'U', 'Ự': 'U', 'Ừ': 'U', 'Ử': 'U', 'Ữ': 'U', 'Ȗ': 'U', 'Ū': 'U', 'Ṻ': 'U', 'Ų': 'U', 'Ů': 'U', 'Ũ': 'U', 'Ṹ': 'U', 'Ṵ': 'U', 'Ꝟ': 'V', 'Ṿ': 'V', 'Ʋ': 'V', 'Ṽ': 'V', 'Ꝡ': 'VY', 'Ẃ': 'W', 'Ŵ': 'W', 'Ẅ': 'W', 'Ẇ': 'W', 'Ẉ': 'W', 'Ẁ': 'W', 'Ⱳ': 'W', 'Ẍ': 'X', 'Ẋ': 'X', 'Ý': 'Y', 'Ŷ': 'Y', 'Ÿ': 'Y', 'Ẏ': 'Y', 'Ỵ': 'Y', 'Ỳ': 'Y', 'Ƴ': 'Y', 'Ỷ': 'Y', 'Ỿ': 'Y', 'Ȳ': 'Y', 'Ɏ': 'Y', 'Ỹ': 'Y', 'Ź': 'Z', 'Ž': 'Z', 'Ẑ': 'Z', 'Ⱬ': 'Z', 'Ż': 'Z', 'Ẓ': 'Z', 'Ȥ': 'Z', 'Ẕ': 'Z', 'Ƶ': 'Z', 'Ĳ': 'IJ', 'Œ': 'OE', 'ᴀ': 'A', 'ᴁ': 'AE', 'ʙ': 'B', 'ᴃ': 'B', 'ᴄ': 'C', 'ᴅ': 'D', 'ᴇ': 'E', 'ꜰ': 'F', 'ɢ': 'G', 'ʛ': 'G', 'ʜ': 'H', 'ɪ': 'I', 'ʁ': 'R', 'ᴊ': 'J', 'ᴋ': 'K', 'ʟ': 'L', 'ᴌ': 'L', 'ᴍ': 'M', 'ɴ': 'N', 'ᴏ': 'O', 'ɶ': 'OE', 'ᴐ': 'O', 'ᴕ': 'OU', 'ᴘ': 'P', 'ʀ': 'R', 'ᴎ': 'N', 'ᴙ': 'R', 'ꜱ': 'S', 'ᴛ': 'T', 'ⱻ': 'E', 'ᴚ': 'R', 'ᴜ': 'U', 'ᴠ': 'V', 'ᴡ': 'W', 'ʏ': 'Y', 'ᴢ': 'Z', 'á': 'a', 'ă': 'a', 'ắ': 'a', 'ặ': 'a', 'ằ': 'a', 'ẳ': 'a', 'ẵ': 'a', 'ǎ': 'a', 'â': 'a', 'ấ': 'a', 'ậ': 'a', 'ầ': 'a', 'ẩ': 'a', 'ẫ': 'a', 'ä': 'a', 'ǟ': 'a', 'ȧ': 'a', 'ǡ': 'a', 'ạ': 'a', 'ȁ': 'a', 'à': 'a', 'ả': 'a', 'ȃ': 'a', 'ā': 'a', 'ą': 'a', 'ᶏ': 'a', 'ẚ': 'a', 'å': 'a', 'ǻ': 'a', 'ḁ': 'a', 'ⱥ': 'a', 'ã': 'a', 'ꜳ': 'aa', 'æ': 'ae', 'ǽ': 'ae', 'ǣ': 'ae', 'ꜵ': 'ao', 'ꜷ': 'au', 'ꜹ': 'av', 'ꜻ': 'av', 'ꜽ': 'ay', 'ḃ': 'b', 'ḅ': 'b', 'ɓ': 'b', 'ḇ': 'b', 'ᵬ': 'b', 'ᶀ': 'b', 'ƀ': 'b', 'ƃ': 'b', 'ɵ': 'o', 'ć': 'c', 'č': 'c', 'ç': 'c', 'ḉ': 'c', 'ĉ': 'c', 'ɕ': 'c', 'ċ': 'c', 'ƈ': 'c', 'ȼ': 'c', 'ď': 'd', 'ḑ': 'd', 'ḓ': 'd', 'ȡ': 'd', 'ḋ': 'd', 'ḍ': 'd', 'ɗ': 'd', 'ᶑ': 'd', 'ḏ': 'd', 'ᵭ': 'd', 'ᶁ': 'd', 'đ': 'd', 'ɖ': 'd', 'ƌ': 'd', 'ı': 'i', 'ȷ': 'j', 'ɟ': 'j', 'ʄ': 'j', 'ǳ': 'dz', 'ǆ': 'dz', 'é': 'e', 'ĕ': 'e', 'ě': 'e', 'ȩ': 'e', 'ḝ': 'e', 'ê': 'e', 'ế': 'e', 'ệ': 'e', 'ề': 'e', 'ể': 'e', 'ễ': 'e', 'ḙ': 'e', 'ë': 'e', 'ė': 'e', 'ẹ': 'e', 'ȅ': 'e', 'è': 'e', 'ẻ': 'e', 'ȇ': 'e', 'ē': 'e', 'ḗ': 'e', 'ḕ': 'e', 'ⱸ': 'e', 'ę': 'e', 'ᶒ': 'e', 'ɇ': 'e', 'ẽ': 'e', 'ḛ': 'e', 'ꝫ': 'et', 'ḟ': 'f', 'ƒ': 'f', 'ᵮ': 'f', 'ᶂ': 'f', 'ǵ': 'g', 'ğ': 'g', 'ǧ': 'g', 'ģ': 'g', 'ĝ': 'g', 'ġ': 'g', 'ɠ': 'g', 'ḡ': 'g', 'ᶃ': 'g', 'ǥ': 'g', 'ḫ': 'h', 'ȟ': 'h', 'ḩ': 'h', 'ĥ': 'h', 'ⱨ': 'h', 'ḧ': 'h', 'ḣ': 'h', 'ḥ': 'h', 'ɦ': 'h', 'ẖ': 'h', 'ħ': 'h', 'ƕ': 'hv', 'í': 'i', 'ĭ': 'i', 'ǐ': 'i', 'î': 'i', 'ï': 'i', 'ḯ': 'i', 'ị': 'i', 'ȉ': 'i', 'ì': 'i', 'ỉ': 'i', 'ȋ': 'i', 'ī': 'i', 'į': 'i', 'ᶖ': 'i', 'ɨ': 'i', 'ĩ': 'i', 'ḭ': 'i', 'ꝺ': 'd', 'ꝼ': 'f', 'ᵹ': 'g', 'ꞃ': 'r', 'ꞅ': 's', 'ꞇ': 't', 'ꝭ': 'is', 'ǰ': 'j', 'ĵ': 'j', 'ʝ': 'j', 'ɉ': 'j', 'ḱ': 'k', 'ǩ': 'k', 'ķ': 'k', 'ⱪ': 'k', 'ꝃ': 'k', 'ḳ': 'k', 'ƙ': 'k', 'ḵ': 'k', 'ᶄ': 'k', 'ꝁ': 'k', 'ꝅ': 'k', 'ĺ': 'l', 'ƚ': 'l', 'ɬ': 'l', 'ľ': 'l', 'ļ': 'l', 'ḽ': 'l', 'ȴ': 'l', 'ḷ': 'l', 'ḹ': 'l', 'ⱡ': 'l', 'ꝉ': 'l', 'ḻ': 'l', 'ŀ': 'l', 'ɫ': 'l', 'ᶅ': 'l', 'ɭ': 'l', 'ł': 'l', 'ǉ': 'lj', 'ſ': 's', 'ẜ': 's', 'ẛ': 's', 'ẝ': 's', 'ḿ': 'm', 'ṁ': 'm', 'ṃ': 'm', 'ɱ': 'm', 'ᵯ': 'm', 'ᶆ': 'm', 'ń': 'n', 'ň': 'n', 'ņ': 'n', 'ṋ': 'n', 'ȵ': 'n', 'ṅ': 'n', 'ṇ': 'n', 'ǹ': 'n', 'ɲ': 'n', 'ṉ': 'n', 'ƞ': 'n', 'ᵰ': 'n', 'ᶇ': 'n', 'ɳ': 'n', 'ñ': 'n', 'ǌ': 'nj', 'ó': 'o', 'ŏ': 'o', 'ǒ': 'o', 'ô': 'o', 'ố': 'o', 'ộ': 'o', 'ồ': 'o', 'ổ': 'o', 'ỗ': 'o', 'ö': 'o', 'ȫ': 'o', 'ȯ': 'o', 'ȱ': 'o', 'ọ': 'o', 'ő': 'o', 'ȍ': 'o', 'ò': 'o', 'ỏ': 'o', 'ơ': 'o', 'ớ': 'o', 'ợ': 'o', 'ờ': 'o', 'ở': 'o', 'ỡ': 'o', 'ȏ': 'o', 'ꝋ': 'o', 'ꝍ': 'o', 'ⱺ': 'o', 'ō': 'o', 'ṓ': 'o', 'ṑ': 'o', 'ǫ': 'o', 'ǭ': 'o', 'ø': 'o', 'ǿ': 'o', 'õ': 'o', 'ṍ': 'o', 'ṏ': 'o', 'ȭ': 'o', 'ƣ': 'oi', 'ꝏ': 'oo', 'ɛ': 'e', 'ᶓ': 'e', 'ɔ': 'o', 'ᶗ': 'o', 'ȣ': 'ou', 'ṕ': 'p', 'ṗ': 'p', 'ꝓ': 'p', 'ƥ': 'p', 'ᵱ': 'p', 'ᶈ': 'p', 'ꝕ': 'p', 'ᵽ': 'p', 'ꝑ': 'p', 'ꝙ': 'q', 'ʠ': 'q', 'ɋ': 'q', 'ꝗ': 'q', 'ŕ': 'r', 'ř': 'r', 'ŗ': 'r', 'ṙ': 'r', 'ṛ': 'r', 'ṝ': 'r', 'ȑ': 'r', 'ɾ': 'r', 'ᵳ': 'r', 'ȓ': 'r', 'ṟ': 'r', 'ɼ': 'r', 'ᵲ': 'r', 'ᶉ': 'r', 'ɍ': 'r', 'ɽ': 'r', 'ↄ': 'c', 'ꜿ': 'c', 'ɘ': 'e', 'ɿ': 'r', 'ś': 's', 'ṥ': 's', 'š': 's', 'ṧ': 's', 'ş': 's', 'ŝ': 's', 'ș': 's', 'ṡ': 's', 'ṣ': 's', 'ṩ': 's', 'ʂ': 's', 'ᵴ': 's', 'ᶊ': 's', 'ȿ': 's', 'ɡ': 'g', 'ß': 'ss', 'ᴑ': 'o', 'ᴓ': 'o', 'ᴝ': 'u', 'ť': 't', 'ţ': 't', 'ṱ': 't', 'ț': 't', 'ȶ': 't', 'ẗ': 't', 'ⱦ': 't', 'ṫ': 't', 'ṭ': 't', 'ƭ': 't', 'ṯ': 't', 'ᵵ': 't', 'ƫ': 't', 'ʈ': 't', 'ŧ': 't', 'ᵺ': 'th', 'ɐ': 'a', 'ᴂ': 'ae', 'ǝ': 'e', 'ᵷ': 'g', 'ɥ': 'h', 'ʮ': 'h', 'ʯ': 'h', 'ᴉ': 'i', 'ʞ': 'k', 'ꞁ': 'l', 'ɯ': 'm', 'ɰ': 'm', 'ᴔ': 'oe', 'ɹ': 'r', 'ɻ': 'r', 'ɺ': 'r', 'ⱹ': 'r', 'ʇ': 't', 'ʌ': 'v', 'ʍ': 'w', 'ʎ': 'y', 'ꜩ': 'tz', 'ú': 'u', 'ŭ': 'u', 'ǔ': 'u', 'û': 'u', 'ṷ': 'u', 'ü': 'u', 'ǘ': 'u', 'ǚ': 'u', 'ǜ': 'u', 'ǖ': 'u', 'ṳ': 'u', 'ụ': 'u', 'ű': 'u', 'ȕ': 'u', 'ù': 'u', 'ủ': 'u', 'ư': 'u', 'ứ': 'u', 'ự': 'u', 'ừ': 'u', 'ử': 'u', 'ữ': 'u', 'ȗ': 'u', 'ū': 'u', 'ṻ': 'u', 'ų': 'u', 'ᶙ': 'u', 'ů': 'u', 'ũ': 'u', 'ṹ': 'u', 'ṵ': 'u', 'ᵫ': 'ue', 'ꝸ': 'um', 'ⱴ': 'v', 'ꝟ': 'v', 'ṿ': 'v', 'ʋ': 'v', 'ᶌ': 'v', 'ⱱ': 'v', 'ṽ': 'v', 'ꝡ': 'vy', 'ẃ': 'w', 'ŵ': 'w', 'ẅ': 'w', 'ẇ': 'w', 'ẉ': 'w', 'ẁ': 'w', 'ⱳ': 'w', 'ẘ': 'w', 'ẍ': 'x', 'ẋ': 'x', 'ᶍ': 'x', 'ý': 'y', 'ŷ': 'y', 'ÿ': 'y', 'ẏ': 'y', 'ỵ': 'y', 'ỳ': 'y', 'ƴ': 'y', 'ỷ': 'y', 'ỿ': 'y', 'ȳ': 'y', 'ẙ': 'y', 'ɏ': 'y', 'ỹ': 'y', 'ź': 'z', 'ž': 'z', 'ẑ': 'z', 'ʑ': 'z', 'ⱬ': 'z', 'ż': 'z', 'ẓ': 'z', 'ȥ': 'z', 'ẕ': 'z', 'ᵶ': 'z', 'ᶎ': 'z', 'ʐ': 'z', 'ƶ': 'z', 'ɀ': 'z', 'ﬀ': 'ff', 'ﬃ': 'ffi', 'ﬄ': 'ffl', 'ﬁ': 'fi', 'ﬂ': 'fl', 'ĳ': 'ij', 'œ': 'oe', 'ﬆ': 'st', 'ₐ': 'a', 'ₑ': 'e', 'ᵢ': 'i', 'ⱼ': 'j', 'ₒ': 'o', 'ᵣ': 'r', 'ᵤ': 'u', 'ᵥ': 'v', 'ₓ': 'x' };\n    }\n    /**\n     * @param {?} text\n     * @param {?=} chars\n     * @return {?}\n     */\n    LatinisePipe.prototype.transform = function (text, chars) {\n        var _this = this;\n        if (chars === void 0) {\n            chars = '\\\\s';\n        }\n        return isString(text)\n            ? text.replace(/[^A-Za-z0-9]/g, function (key) {\n                return _this.latinMap[key] || key;\n            }) : text;\n    };\n    return LatinisePipe;\n}());\nvar LinesPipe = /*@__PURE__*/ (function () {\n    function LinesPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} chars\n     * @return {?}\n     */\n    LinesPipe.prototype.transform = function (text, chars) {\n        if (chars === void 0) {\n            chars = '\\\\s';\n        }\n        return isString(text)\n            ? text.replace(/\\r\\n/g, '\\n').split('\\n')\n            : text;\n    };\n    return LinesPipe;\n}());\nvar UnderscorePipe = /*@__PURE__*/ (function () {\n    function UnderscorePipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} chars\n     * @return {?}\n     */\n    UnderscorePipe.prototype.transform = function (text, chars) {\n        if (chars === void 0) {\n            chars = '\\\\s';\n        }\n        return isString(text)\n            ? text.trim()\n                .replace(/\\s+/g, '')\n                .replace(/[A-Z]/g, function (c, k) {\n                return k ? \"_\" + c.toLowerCase() : c.toLowerCase();\n            })\n            : text;\n    };\n    return UnderscorePipe;\n}());\nvar MatchPipe = /*@__PURE__*/ (function () {\n    function MatchPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?} pattern\n     * @param {?=} flags\n     * @return {?}\n     */\n    MatchPipe.prototype.transform = function (text, pattern, flags) {\n        if (!isString(text)) {\n            return text;\n        }\n        return text.match(new RegExp(pattern, flags));\n    };\n    return MatchPipe;\n}());\nvar TestPipe = /*@__PURE__*/ (function () {\n    function TestPipe() {\n    }\n    /**\n     * @param {?} text\n     * @param {?} pattern\n     * @param {?=} flags\n     * @return {?}\n     */\n    TestPipe.prototype.transform = function (text, pattern, flags) {\n        if (!isString(text)) {\n            return text;\n        }\n        return (new RegExp(pattern, flags)).test(text);\n    };\n    return TestPipe;\n}());\nvar LeftPadPipe = /*@__PURE__*/ (function () {\n    function LeftPadPipe() {\n    }\n    /**\n     * @param {?} str\n     * @param {?} length\n     * @param {?=} padCharacter\n     * @return {?}\n     */\n    LeftPadPipe.prototype.transform = function (str, length, padCharacter) {\n        if (padCharacter === void 0) {\n            padCharacter = ' ';\n        }\n        if (!isString(str) || str.length >= length) {\n            return str;\n        }\n        while (str.length < length) {\n            str = padCharacter + str;\n        }\n        return str;\n    };\n    return LeftPadPipe;\n}());\nvar RightPadPipe = /*@__PURE__*/ (function () {\n    function RightPadPipe() {\n    }\n    /**\n     * @param {?} str\n     * @param {?=} length\n     * @param {?=} padCharacter\n     * @return {?}\n     */\n    RightPadPipe.prototype.transform = function (str, length, padCharacter) {\n        if (length === void 0) {\n            length = 1;\n        }\n        if (padCharacter === void 0) {\n            padCharacter = ' ';\n        }\n        if (!isString(str) || str.length >= length) {\n            return str;\n        }\n        while (str.length < length) {\n            str = str + padCharacter;\n        }\n        return str;\n    };\n    return RightPadPipe;\n}());\nvar STRING_PIPES = [\n    LeftTrimPipe, RepeatPipe, RightTrimPipe, ScanPipe, ShortenPipe,\n    StripTagsPipe, TrimPipe, UcFirstPipe, UcWordsPipe, SlugifyPipe,\n    CamelizePipe, LatinisePipe, LinesPipe, UnderscorePipe, MatchPipe,\n    TestPipe, LeftPadPipe, RightPadPipe,\n];\nvar NgStringPipesModule = /*@__PURE__*/ (function () {\n    function NgStringPipesModule() {\n    }\n    return NgStringPipesModule;\n}());\nvar MaxPipe = /*@__PURE__*/ (function () {\n    function MaxPipe() {\n    }\n    /**\n     * @param {?} arr\n     * @return {?}\n     */\n    MaxPipe.prototype.transform = function (arr) {\n        return Array.isArray(arr)\n            ? Math.max.apply(Math, arr) : arr;\n    };\n    return MaxPipe;\n}());\nvar MinPipe = /*@__PURE__*/ (function () {\n    function MinPipe() {\n    }\n    /**\n     * @param {?} arr\n     * @return {?}\n     */\n    MinPipe.prototype.transform = function (arr) {\n        return Array.isArray(arr)\n            ? Math.min.apply(Math, arr) : arr;\n    };\n    return MinPipe;\n}());\nvar PercentagePipe = /*@__PURE__*/ (function () {\n    function PercentagePipe() {\n    }\n    /**\n     * @param {?} num\n     * @param {?=} total\n     * @param {?=} floor\n     * @return {?}\n     */\n    PercentagePipe.prototype.transform = function (num, total, floor) {\n        if (total === void 0) {\n            total = 100;\n        }\n        if (floor === void 0) {\n            floor = false;\n        }\n        if (isNaN(num)) {\n            return num;\n        }\n        var /** @type {?} */ percent = num * 100 / total;\n        return floor ? Math.floor(percent) : percent;\n    };\n    return PercentagePipe;\n}());\nvar SumPipe = /*@__PURE__*/ (function () {\n    function SumPipe() {\n    }\n    /**\n     * @param {?} arr\n     * @return {?}\n     */\n    SumPipe.prototype.transform = function (arr) {\n        return Array.isArray(arr)\n            ? arr.reduce(function (sum, curr) { return sum + curr; }, 0)\n            : arr;\n    };\n    return SumPipe;\n}());\nvar FloorPipe = /*@__PURE__*/ (function () {\n    function FloorPipe() {\n    }\n    /**\n     * @param {?} num\n     * @param {?=} precision\n     * @return {?}\n     */\n    FloorPipe.prototype.transform = function (num, precision) {\n        if (precision === void 0) {\n            precision = 0;\n        }\n        if (precision <= 0) {\n            return Math.floor(num);\n        }\n        var /** @type {?} */ tho = Math.pow(10, precision);\n        return Math.floor(num * tho) / tho;\n    };\n    return FloorPipe;\n}());\nvar RoundPipe = /*@__PURE__*/ (function () {\n    function RoundPipe() {\n    }\n    /**\n     * @param {?} num\n     * @param {?=} precision\n     * @return {?}\n     */\n    RoundPipe.prototype.transform = function (num, precision) {\n        if (precision === void 0) {\n            precision = 0;\n        }\n        return applyPrecision(num, precision);\n    };\n    return RoundPipe;\n}());\nvar SqrtPipe = /*@__PURE__*/ (function () {\n    function SqrtPipe() {\n    }\n    /**\n     * @param {?} num\n     * @return {?}\n     */\n    SqrtPipe.prototype.transform = function (num) {\n        return !isNaN(num)\n            ? Math.sqrt(num)\n            : num;\n    };\n    return SqrtPipe;\n}());\nvar PowerPipe = /*@__PURE__*/ (function () {\n    function PowerPipe() {\n    }\n    /**\n     * @param {?} num\n     * @param {?=} power\n     * @return {?}\n     */\n    PowerPipe.prototype.transform = function (num, power) {\n        if (power === void 0) {\n            power = 2;\n        }\n        return !isNaN(num)\n            ? Math.pow(num, power)\n            : num;\n    };\n    return PowerPipe;\n}());\nvar CeilPipe = /*@__PURE__*/ (function () {\n    function CeilPipe() {\n    }\n    /**\n     * @param {?} num\n     * @param {?=} precision\n     * @return {?}\n     */\n    CeilPipe.prototype.transform = function (num, precision) {\n        if (precision === void 0) {\n            precision = 0;\n        }\n        if (precision <= 0) {\n            return Math.ceil(num);\n        }\n        var /** @type {?} */ tho = Math.pow(10, precision);\n        return Math.ceil(num * tho) / tho;\n    };\n    return CeilPipe;\n}());\nvar DegreesPipe = /*@__PURE__*/ (function () {\n    function DegreesPipe() {\n    }\n    /**\n     * @param {?} radians\n     * @return {?}\n     */\n    DegreesPipe.prototype.transform = function (radians) {\n        if (!isNumberFinite(radians)) {\n            return NaN;\n        }\n        return radians * 180 / Math.PI;\n    };\n    return DegreesPipe;\n}());\nvar BytesPipe = /*@__PURE__*/ (function () {\n    function BytesPipe() {\n        this.dictionary = [\n            { max: 1024, type: 'B' },\n            { max: 1048576, type: 'KB' },\n            { max: 1073741824, type: 'MB' },\n            { max: 1.0995116e12, type: 'GB' },\n        ];\n    }\n    /**\n     * @param {?} value\n     * @param {?=} precision\n     * @return {?}\n     */\n    BytesPipe.prototype.transform = function (value, precision) {\n        if (!isNumberFinite(value)) {\n            return NaN;\n        }\n        var /** @type {?} */ format = this.dictionary.find(function (d) { return value < d.max; }) || this.dictionary[this.dictionary.length - 1];\n        var /** @type {?} */ calc = value / (format.max / 1024);\n        var /** @type {?} */ num = isUndefined(precision) ? calc : applyPrecision(calc, precision);\n        return num + \" \" + format.type;\n    };\n    return BytesPipe;\n}());\nvar RadiansPipe = /*@__PURE__*/ (function () {\n    function RadiansPipe() {\n    }\n    /**\n     * @param {?} degrees\n     * @return {?}\n     */\n    RadiansPipe.prototype.transform = function (degrees) {\n        if (!isNumberFinite(degrees)) {\n            return NaN;\n        }\n        return degrees * Math.PI / 180;\n    };\n    return RadiansPipe;\n}());\nvar MATH_PIPES = [\n    MaxPipe, MinPipe, PercentagePipe, SumPipe, FloorPipe, RoundPipe, SqrtPipe, PowerPipe,\n    CeilPipe, DegreesPipe, BytesPipe, RadiansPipe,\n];\nvar NgMathPipesModule = /*@__PURE__*/ (function () {\n    function NgMathPipesModule() {\n    }\n    return NgMathPipesModule;\n}());\nvar IsDefinedPipe = /*@__PURE__*/ (function () {\n    function IsDefinedPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsDefinedPipe.prototype.transform = function (input) {\n        return !isUndefined(input);\n    };\n    return IsDefinedPipe;\n}());\nvar IsNullPipe = /*@__PURE__*/ (function () {\n    function IsNullPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsNullPipe.prototype.transform = function (input) {\n        return input === null;\n    };\n    return IsNullPipe;\n}());\nvar IsUndefinedPipe = /*@__PURE__*/ (function () {\n    function IsUndefinedPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsUndefinedPipe.prototype.transform = function (input) {\n        return isUndefined(input);\n    };\n    return IsUndefinedPipe;\n}());\nvar IsStringPipe = /*@__PURE__*/ (function () {\n    function IsStringPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsStringPipe.prototype.transform = function (input) {\n        return isString(input);\n    };\n    return IsStringPipe;\n}());\nvar IsFunctionPipe = /*@__PURE__*/ (function () {\n    function IsFunctionPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsFunctionPipe.prototype.transform = function (input) {\n        return isFunction(input);\n    };\n    return IsFunctionPipe;\n}());\nvar IsNumberPipe = /*@__PURE__*/ (function () {\n    function IsNumberPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsNumberPipe.prototype.transform = function (input) {\n        return isNumber(input);\n    };\n    return IsNumberPipe;\n}());\nvar IsArrayPipe = /*@__PURE__*/ (function () {\n    function IsArrayPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsArrayPipe.prototype.transform = function (input) {\n        return Array.isArray(input);\n    };\n    return IsArrayPipe;\n}());\nvar IsObjectPipe = /*@__PURE__*/ (function () {\n    function IsObjectPipe() {\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    IsObjectPipe.prototype.transform = function (input) {\n        return isObject(input);\n    };\n    return IsObjectPipe;\n}());\nvar IsGreaterEqualThanPipe = /*@__PURE__*/ (function () {\n    function IsGreaterEqualThanPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsGreaterEqualThanPipe.prototype.transform = function (input, other) {\n        return input >= other;\n    };\n    return IsGreaterEqualThanPipe;\n}());\nvar IsGreaterThanPipe = /*@__PURE__*/ (function () {\n    function IsGreaterThanPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsGreaterThanPipe.prototype.transform = function (input, other) {\n        return input > other;\n    };\n    return IsGreaterThanPipe;\n}());\nvar IsLessEqualThanPipe = /*@__PURE__*/ (function () {\n    function IsLessEqualThanPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsLessEqualThanPipe.prototype.transform = function (input, other) {\n        return input <= other;\n    };\n    return IsLessEqualThanPipe;\n}());\nvar IsEqualToPipe = /*@__PURE__*/ (function () {\n    function IsEqualToPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsEqualToPipe.prototype.transform = function (input, other) {\n        // tslint:disable-next-line:triple-equals\n        return input == other;\n    };\n    return IsEqualToPipe;\n}());\nvar IsNotEqualToPipe = /*@__PURE__*/ (function () {\n    function IsNotEqualToPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsNotEqualToPipe.prototype.transform = function (input, other) {\n        // tslint:disable-next-line:triple-equals\n        return input != other;\n    };\n    return IsNotEqualToPipe;\n}());\nvar IsIdenticalToPipe = /*@__PURE__*/ (function () {\n    function IsIdenticalToPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsIdenticalToPipe.prototype.transform = function (input, other) {\n        return input === other;\n    };\n    return IsIdenticalToPipe;\n}());\nvar IsNotIdenticalToPipe = /*@__PURE__*/ (function () {\n    function IsNotIdenticalToPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsNotIdenticalToPipe.prototype.transform = function (input, other) {\n        return input !== other;\n    };\n    return IsNotIdenticalToPipe;\n}());\nvar IsLessThanPipe = /*@__PURE__*/ (function () {\n    function IsLessThanPipe() {\n    }\n    /**\n     * @param {?} input\n     * @param {?} other\n     * @return {?}\n     */\n    IsLessThanPipe.prototype.transform = function (input, other) {\n        return input < other;\n    };\n    return IsLessThanPipe;\n}());\nvar BOOLEAN_PIPES = [\n    IsDefinedPipe, IsNullPipe, IsUndefinedPipe, IsStringPipe, IsFunctionPipe, IsNumberPipe,\n    IsArrayPipe, IsObjectPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsLessEqualThanPipe,\n    IsLessEqualThanPipe, IsEqualToPipe, IsNotEqualToPipe, IsIdenticalToPipe, IsNotIdenticalToPipe,\n    IsLessThanPipe,\n];\nvar NgBooleanPipesModule = /*@__PURE__*/ (function () {\n    function NgBooleanPipesModule() {\n    }\n    return NgBooleanPipesModule;\n}());\nvar NgPipesModule = /*@__PURE__*/ (function () {\n    function NgPipesModule() {\n    }\n    return NgPipesModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgPipesModule, NgArrayPipesModule, DiffPipe, InitialPipe, FlattenPipe, IntersectionPipe, ReversePipe, TailPipe, TrurthifyPipe, UnionPipe, UniquePipe, WithoutPipe, PluckPipe, ShufflePipe, EveryPipe, SomePipe, SamplePipe, GroupByPipe, FilterByPipe, OrderByPipe, GroupByImpurePipe, FilterByImpurePipe, OrderByImpurePipe, RangePipe, NgObjectPipesModule, KeysPipe, ValuesPipe, PairsPipe, PickPipe, OmitPipe, InvertPipe, InvertByPipe, DiffObjPipe, STRING_PIPES, NgStringPipesModule, UcWordsPipe, LeftTrimPipe, RepeatPipe, RightTrimPipe, ScanPipe, ShortenPipe, StripTagsPipe, TrimPipe, UcFirstPipe, SlugifyPipe, CamelizePipe, LatinisePipe, LinesPipe, UnderscorePipe, MatchPipe, TestPipe, LeftPadPipe, RightPadPipe, MATH_PIPES, NgMathPipesModule, MaxPipe, MinPipe, PercentagePipe, SumPipe, FloorPipe, RoundPipe, SqrtPipe, PowerPipe, CeilPipe, DegreesPipe, BytesPipe, BOOLEAN_PIPES, NgBooleanPipesModule, IsDefinedPipe, IsNullPipe, IsUndefinedPipe, IsStringPipe, IsFunctionPipe, IsNumberPipe, IsArrayPipe, IsObjectPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsLessEqualThanPipe, IsEqualToPipe, IsNotEqualToPipe, IsIdenticalToPipe, IsNotIdenticalToPipe, IsLessThanPipe, isString as ɵa, RadiansPipe as ɵb };\n//# sourceMappingURL=ngx-pipes.es5.js.map\n",null]}